class Node:
    def __init__(self, f=0, g=999999, h=0, name=0):
        self.f = f
        self.g = g
        self.h = h
        self.name = name
        self.neighbours = {}
        
    def setNeighbours(self, neighbours={}):
        self.neighbours = neighbours

def create_graph():
    num_nodes = int(input("Enter the number of nodes in the graph: "))
    graph = [[-1] * num_nodes for _ in range(num_nodes)]
    
    print("Enter the adjacency matrix for the graph (-1 for no connection):")
    for i in range(num_nodes):
        for j in range(num_nodes):
            graph[i][j] = int(input(f"Enter weight from node {i} to node {j}: "))
    
    return graph

def create_heuristics(num_nodes):
    heuristics = []
    print("Enter the heuristic value for each node:")
    for i in range(num_nodes):
        heuristic = int(input(f"Enter heuristic for node {i}: "))
        heuristics.append(heuristic)
    return heuristics

def astar(start, goal, graph):
    closedSet = set([])
    openSet = set([start])
    cameFrom = {}
    start.g = 0
    start.f = start.h

    while len(openSet) != 0:
        current = findNodeWithLowestFScore(openSet)
        if current == goal:
            return contruct_path(cameFrom, current)
        openSet.remove(current)
        closedSet.add(current)
        print(current.name, current.f, current.g, current.h)
        for neighbour_name, weight in current.neighbours.items():
            neighbour = nodes[neighbour_name]
            print(neighbour.name, neighbour.f, neighbour.g, neighbour.h)
            if neighbour in closedSet:
                continue
            if neighbour not in openSet:
                openSet.add(neighbour)
            tentative_gScore = current.g + weight
            print(tentative_gScore)
            if tentative_gScore >= neighbour.g:
                continue
            cameFrom[neighbour] = current
            neighbour.g = tentative_gScore
            neighbour.f = neighbour.g + neighbour.h
    return -1

def findNodeWithLowestFScore(openSet):
    fScore = 999999
    node = None
    for eachNode in openSet:
        if eachNode.f < fScore:
            fScore = eachNode.f
            node = eachNode
    return node

def contruct_path(cameFrom, current):
    totalPath = []
    while current in cameFrom.keys():
        current = cameFrom[current]
        totalPath.append(current)
    return totalPath

if __name__ == "__main__":
    graph = create_graph()
    num_nodes = len(graph)
    heuristics = create_heuristics(num_nodes)
    
    nodes = [Node(h=heuristics[i], name=i) for i in range(num_nodes)]
    
    for i in range(num_nodes):
        neighbours = {}
        for j in range(num_nodes):
            if graph[i][j] != -1:
                neighbours[j] = graph[i][j]
        nodes[i].setNeighbours(neighbours)
    
    start_node_index = int(input("Enter the index of the start node: "))
    goal_node_index = int(input("Enter the index of the goal node: "))
    startNode = nodes[start_node_index]
    goalNode = nodes[goal_node_index]
    
    path = astar(startNode, goalNode, graph)
    print("Path is: ", end="")
    for node in path[::-1]:
        print(str(node.name) + "-->", end="")
    print(goalNode.name)
    print("\nCost = " + str(goalNode.g))